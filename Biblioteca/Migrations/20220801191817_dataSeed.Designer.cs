// <auto-generated />
using System;
using Biblioteca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteca.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220801191817_dataSeed")]
    partial class dataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Biblioteca.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "George Orwell",
                            CopiesAvailable = 5,
                            ISBN = "9780451524935",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Stephen Hawking",
                            CopiesAvailable = 1,
                            ISBN = "9780553380163",
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Frank Herbert",
                            CopiesAvailable = 3,
                            ISBN = "0441013597",
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Ray Bradbury",
                            CopiesAvailable = 7,
                            ISBN = "9781451673319",
                            Title = "Fahrenheit 451"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Hunter S. Thompson",
                            CopiesAvailable = 2,
                            ISBN = "9780679785897",
                            Title = "Fear and Loathing in Las Vegas"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Cormac McCarthy",
                            CopiesAvailable = 1,
                            ISBN = "9780307387899",
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Joseph Heller",
                            CopiesAvailable = 6,
                            ISBN = "1451626657",
                            Title = "Catch-22"
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            CopiesAvailable = 5,
                            ISBN = "0439708184",
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Gabriel Garcia Marquez",
                            CopiesAvailable = 2,
                            ISBN = "0307389731",
                            Title = "Love in the Time of Cholera"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Kurt Vonnegut",
                            CopiesAvailable = 1,
                            ISBN = "0812988523",
                            Title = "Slaughterhouse-Five"
                        },
                        new
                        {
                            Id = 11,
                            Author = "J. D. Salinger",
                            CopiesAvailable = 2,
                            ISBN = "9780316769174",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Suzanne Collins",
                            CopiesAvailable = 3,
                            ISBN = "9780439023528",
                            Title = "The Hunger Games"
                        },
                        new
                        {
                            Id = 13,
                            Author = "J.R.R. Tolkien",
                            CopiesAvailable = 5,
                            ISBN = "9780544003415",
                            Title = "The Lord Of The Rings"
                        },
                        new
                        {
                            Id = 14,
                            Author = "Stephen King",
                            CopiesAvailable = 2,
                            ISBN = "0307743659",
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = 15,
                            Author = "Albert Camus",
                            CopiesAvailable = 1,
                            ISBN = "9780679720201",
                            Title = "The Stranger"
                        },
                        new
                        {
                            Id = 16,
                            Author = "Harper Lee ",
                            CopiesAvailable = 2,
                            ISBN = "0446310786",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 17,
                            Author = "Paulo Coelho",
                            CopiesAvailable = 4,
                            ISBN = "0062315005",
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = 18,
                            Author = "William Golding",
                            CopiesAvailable = 6,
                            ISBN = "0399501487",
                            Title = "Lord of the Flies"
                        },
                        new
                        {
                            Id = 19,
                            Author = "George Orwell",
                            CopiesAvailable = 1,
                            ISBN = "9780451526342",
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = 20,
                            Author = "Sun Tzu",
                            CopiesAvailable = 2,
                            ISBN = "1599869772",
                            Title = "The Art of War"
                        },
                        new
                        {
                            Id = 21,
                            Author = "George R. R. Martin",
                            CopiesAvailable = 1,
                            ISBN = "9780553593716",
                            Title = "A Game of Thrones"
                        });
                });

            modelBuilder.Entity("Biblioteca.Models.Borrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountOfDays")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBorrowed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinePay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Borrowings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountOfDays = 7,
                            BookId = 1,
                            DateBorrowed = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateReturned = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FinePay = 0m,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountOfDays = 7,
                            BookId = 3,
                            DateBorrowed = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateReturned = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FinePay = 0m,
                            MemberId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountOfDays = 7,
                            BookId = 1,
                            DateBorrowed = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FinePay = 0m,
                            MemberId = 1
                        });
                });

            modelBuilder.Entity("Biblioteca.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1789 Roosevelt Street",
                            FirstName = "Paul ",
                            LastName = "Jordan",
                            Phone = "415-402-9948"
                        },
                        new
                        {
                            Id = 2,
                            Address = "3573 Robinson Lane",
                            FirstName = "Bennie",
                            LastName = "Berg",
                            Phone = "740-395-3860"
                        },
                        new
                        {
                            Id = 3,
                            Address = "227 Illinois Avenue",
                            FirstName = "Deborah",
                            LastName = "Carroll",
                            Phone = "503-756-1738"
                        },
                        new
                        {
                            Id = 4,
                            Address = "2519 Owen Lane",
                            FirstName = "Clayton",
                            LastName = "Charney",
                            Phone = "231-912-3291"
                        },
                        new
                        {
                            Id = 5,
                            Address = "725 Jerry Toth Drive",
                            FirstName = "Norman",
                            LastName = "Grant",
                            Phone = "907-592-5611"
                        },
                        new
                        {
                            Id = 6,
                            Address = "3685 Cessna Drive",
                            FirstName = "Carlos",
                            LastName = "Showman",
                            Phone = "260-301-1055"
                        },
                        new
                        {
                            Id = 7,
                            Address = "555 Timber Ridge Road",
                            FirstName = "Michael",
                            LastName = "Lombard",
                            Phone = "916-731-0951"
                        },
                        new
                        {
                            Id = 8,
                            Address = "2613 Thomas Street",
                            FirstName = "Leticia",
                            LastName = "Martin",
                            Phone = "847-582-3103"
                        },
                        new
                        {
                            Id = 9,
                            Address = "219-788-5848",
                            FirstName = "Kathy",
                            LastName = "Murphy",
                            Phone = "4332 Duffy Street"
                        },
                        new
                        {
                            Id = 10,
                            Address = "3608 Lindale Avenue",
                            FirstName = "Helen",
                            LastName = "Navarro",
                            Phone = "510-526-9981"
                        },
                        new
                        {
                            Id = 11,
                            Address = "13 Hart Street",
                            FirstName = "Jordon",
                            LastName = "Lopez",
                            Phone = "860-296-3684"
                        },
                        new
                        {
                            Id = 12,
                            Address = "4615 Logan Lane",
                            FirstName = "Frances",
                            LastName = "Drew",
                            Phone = "303-235-2505"
                        },
                        new
                        {
                            Id = 13,
                            Address = "3318 Delaware Avenue",
                            FirstName = "Christian",
                            LastName = "Arvidson",
                            Phone = "408-460-0134"
                        },
                        new
                        {
                            Id = 14,
                            Address = "299 Pretty View Lane",
                            FirstName = "Helen",
                            LastName = "Branch",
                            Phone = "510-390-5862"
                        },
                        new
                        {
                            Id = 15,
                            Address = "4798 County Line Road",
                            FirstName = "Robert",
                            LastName = "Reep",
                            Phone = "561-201-7735"
                        },
                        new
                        {
                            Id = 16,
                            Address = "4908 Broadcast Drive",
                            FirstName = "Carolyn",
                            LastName = "Ferrell",
                            Phone = "704-303-7415"
                        },
                        new
                        {
                            Id = 17,
                            Address = "1298 Star Trek Drive",
                            FirstName = "Barbara",
                            LastName = "Fischer",
                            Phone = "561-601-3217"
                        },
                        new
                        {
                            Id = 18,
                            Address = "3708 Frum Street",
                            FirstName = "James",
                            LastName = "Mallory",
                            Phone = "615-214-7742"
                        },
                        new
                        {
                            Id = 19,
                            Address = "4553 Green Avenue",
                            FirstName = "James",
                            LastName = "Brewster",
                            Phone = "714-616-6653"
                        },
                        new
                        {
                            Id = 20,
                            Address = "2255 Woodland Terrace",
                            FirstName = "Andrew",
                            LastName = "Nagy",
                            Phone = "916-814-4101"
                        },
                        new
                        {
                            Id = 21,
                            Address = "1146 Brookview Drive",
                            FirstName = "Jane",
                            LastName = "Santacruz",
                            Phone = "408-332-9460"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Models.Borrowing", b =>
                {
                    b.HasOne("Biblioteca.Models.Book", "Book")
                        .WithMany("Borrowings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Member", "Member")
                        .WithMany("Borrowings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteca.Models.Book", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("Biblioteca.Models.Member", b =>
                {
                    b.Navigation("Borrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
